import {
  Control,
  FieldPath,
  FieldValues
} from "react-hook-form"

import { Input } from "@/shared/shadcn-ui/input"
import { Textarea } from "@/shared/shadcn-ui/textarea"
import {
  FormField,
  FormControl,
  FormItem,
  FormLabel,
  FormMessage,
  FormDescription,
} from "@/shared/shadcn-ui/form"

import { DyfFieldLov, DyfFieldText, DyfFieldTextArea } from "./defs"
import { Popover, PopoverContent, PopoverTrigger } from "@/shared/shadcn-ui/popover"
import { Button } from "@/shared/shadcn-ui/button"
import { CaretSortIcon } from "@radix-ui/react-icons"
import { Command, CommandEmpty, CommandGroup, CommandInput } from "@/shared/shadcn-ui/command"
import { cn } from "@/shared/shadcn-ui/utils"

export const DyfField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  control,
  name,
  fieldTypeId = DyfFieldText,
  editable = false,
}: {
  control: Control<TFieldValues, any>,
  name: TName,
  fieldTypeId?: string
  editable?: boolean,
}) => {

  return <>
    <FormField<TFieldValues, TName>
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem className="flex flex-col">

          <FormLabel>{field.name}</FormLabel>

          {fieldTypeId === DyfFieldLov ? (
            <>
              {/* <Popover>
                <PopoverTrigger asChild>
                  <FormControl>
                    <Button
                      variant="outline"
                      role="combobox"
                      className={cn(
                        "justify-between",
                        !field.value && "text-muted-foreground"
                      )}
                    >
                      {"Select language"}
                      <CaretSortIcon className="w-4 h-4 ml-2 opacity-50 shrink-0" />
                    </Button>
                  </FormControl>
                </PopoverTrigger>
                <PopoverContent className="w-[400px] p-0">
                  <Command>
                    <CommandInput placeholder="Search language..." />
                    <CommandEmpty>No language found.</CommandEmpty>
                    <CommandGroup>
                      XXXX
                      {
                        languages.map((language) => (
                          <CommandItem
                            value={language.label}
                            key={language.value}
                            onSelect={() => {
                              form.setValue("language", language.value)
                            }}
                          >
                            <CheckIcon
                              className={cn(
                                "mr-2 h-4 w-4",
                                language.value === field.value
                                  ? "opacity-100"
                                  : "opacity-0"
                              )}
                            />
                            {language.label}
                          </CommandItem>
                        ))
                      }
                    </CommandGroup>
                  </Command>
                </PopoverContent>
              </Popover> */}
            </>

          ) : (

            <FormControl>
              {fieldTypeId === DyfFieldText ? (
                <Input
                  {...field}
                  disabled={!editable}
                  placeholder={field.name}
                />
              ) : fieldTypeId === DyfFieldTextArea ? (
                <Textarea
                  {...field}
                  disabled={!editable}
                  placeholder={field.name}
                />
              ) : (
                <div>Unknown</div>
              )}
            </FormControl>

          )}

          {/* <FormDescription className="text-xs">
            This is the language that will be used in the dashboard.
          </FormDescription> */}

          <FormMessage />
        </FormItem>
      )}
    />
  </>
}
